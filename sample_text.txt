Time  ies like an arrow, and we can easily set a starting point and count forward and backward in seconds. So why is it so hard to deal with time? The problem is humans. All would be easy if we could just tell each other: “Meet me at 1523793600, and don’t be late!” But we want time to relate to daylight and the seasons. That’s where things get complicated. Java 1.0 had a Date class that was, in hindsight, naïve, and had most of its methods deprecated in Java 1.1 when a Calendar class was introduced. Its API wasn’t stellar, its instances were mutable, and it didn’t deal with issues such as leap seconds. The third time is a charm, and the java.time API introduced in Java SE 8 has remedied the  aws of the past and should serve us for quite some time. In this chapter, you will learn what makes time computations so vexing, and how the Date and Time API solves these issues.
 351
 352 Chapter 6   The Date and Time API
 6.1 The Time Line
Historically, the fundamental time unit—the second—was derived from Earth’s rotation around its axis. There are 24 hours or 24 × 60 × 60 = 86400 seconds in a full revolution, so it seems just a question of astronomical measurements to pre- cisely de ne a second. Unfortunately, Earth wobbles slightly, and a more precise de nition was needed. In 1967, a new precise de nition of a second, matching the historical de nition, was derived from an intrinsic property of atoms of caesium-133. Since then, a network of atomic clocks keeps the of cial time.
Ever so often, the of cial time keepers synchronize the absolute time with the rotation of Earth. At  rst, the of cial seconds were slightly adjusted, but starting in 1972, “leap seconds” were occasionally inserted. (In theory, a second might need to be removed once in a while, but that has not yet happened.) There is talk of changing the system again. Clearly, leap seconds are a pain, and many computer systems instead use “smoothing” where time is arti cially slowed down or sped up just before the leap second, keeping 86,400 seconds per day. This works because the local time on a computer isn’t all that precise, and computers are used to synchronizing themselves with an external time service.
The Java Date and Time API speci cation requires that Java uses a time scale that:
• Has 86,400 seconds per day.
• Exactly matches the of cial time at noon each day.
• Closely matches it elsewhere, in a precisely de ned way.
That gives Java the  exibility to adjust to future changes in the of cial time.
In Java, an Instant represents a point on the time line. An origin, called the epoch, is arbitrarily set at midnight of January 1, 1970 at the prime meridian that passes through the Greenwich Royal Observatory in London. This is the same convention used in the UNIX/POSIX time. Starting from that origin, time is measured in 86,400 seconds per day, forward and backward, to nanosecond precision. The Instant values go back as far as a billion years (Instant.MIN). That’s not quite enough to express the age of the universe (around 13.5 billion years), but it should be enough for all practical purposes. After all, a billion years ago, the earth was covered in ice and populated by microscopic ancestors of today’s plants and ani- mals. The largest value, Instant.MAX, is December 31 of the year 1,000,000,000.
The static method call Instant.now() gives the current instant. You can compare two instants with the equals and compareTo methods in the usual way, so you can use instants as timestamps.
To  nd out the difference between two instants, use the static method Duration.between. For example, here is how you can measure the running time of an algorithm:

 6.1 The Time Line 353
 Instant start = Instant.now();
runAlgorithm();
Instant end = Instant.now();
Duration timeElapsed = Duration.between(start, end); long millis = timeElapsed.toMillis();
A Duration is the amount of time between two instants. You can get the length of a Duration in conventional units by calling toNanos, toMillis, getSeconds, toMinutes, toHours, or toDays.
Durations require more than a long value for their internal storage. The number of seconds is stored in a long, and the number of nanoseconds in an additional int. If you want to make computations to nanosecond accuracy, and you actually need the entire range of a Duration, you can use one of the methods in Table 6.1. Otherwise, you can just call toNanos and do your calculations with long values.
NOTE: It takes almost 300 years of nanoseconds to over ow a long.
For example, if you want to check whether an algorithm is at least ten times faster than another, you can compute
Duration timeElapsed2 = Duration.between(start2, end2); boolean overTenTimesFaster =
timeElapsed.multipliedBy(10).minus(timeElapsed2).isNegative(); // Or timeElapsed.toNanos() * 10 < timeElapsed2.toNanos()
Table 6.1 Arithmetic Operations for Time Instants and Durations
     Method
plus, minus
plusNanos, plusMillis, plusSeconds,
minusNanos, minusMillis, minusSeconds plusMinutes, plusHours, plusDays,
minusMinutes, minusHours, minusDays multipliedBy, dividedBy, negated
isZero, isNegative
Description
Adds a duration to, or subtracts a duration from, this Instant or Duration.
Adds or subtracts a number of the given time units to this Instant or Duration.
Adds or subtracts a number of the given time units to this Duration.
Returns a duration obtained by multiplying or dividing this Duration by a given long, or by –1. Note that you can scale only durations, not instants.
Checks whether this Duration is zero or negative.
      
 354 Chapter 6   The Date and Time API
  NOTE: The Instant and Duration classes are immutable, and all methods, such as multipliedBy or minus, return a new instance.
In the example program in Listing 6.1, you can see how to use the Instant and Duration classes for timing two algorithms.
Listing 6.1 timeline/TimeLine.java
1 packagetimeline; 2
3 importjava.time.*;
4 importjava.util.*;
5 importjava.util.stream.*;
6
7 publicclassTimeline 8{
9 public static void main(String[] args)
10 {
11 Instant start = Instant.now();
12 runAlgorithm();
13 Instant end = Instant.now();
14 Duration timeElapsed = Duration.between(start, end);
15 long millis = timeElapsed.toMillis();
16 System.out.printf("%d milliseconds\n", millis);
17
18 Instant start2 = Instant.now();
19 runAlgorithm2();
20 Instant end2 = Instant.now();
21 Duration timeElapsed2 = Duration.between(start2, end2);
22 System.out.printf("%d milliseconds\n", timeElapsed2.toMillis());
23 boolean overTenTimesFaster = timeElapsed.multipliedBy(10)
24 .minus(timeElapsed2).isNegative();
25 System.out.printf("The first algorithm is %smore than ten times faster",
26 overTenTimesFaster ? "" : "not ");
27 }
28
29 public static void runAlgorithm()
30 {
31 int size = 10;
32 List<Integer> list = new Random().ints().map(i -> i % 100).limit(size)
33 .boxed().collect(Collectors.toList());
34 Collections.sort(list);
35 System.out.println(list);
36 }
37
     
 38 39 40 41 42 43 44 45 46 47 48
public static void runAlgorithm2() {
int size = 10;
List<Integer> list = new Random().ints().map(i -> i % 100).limit(size)
.boxed().collect(Collectors.toList()); while (!IntStream.range(1, list.size()).allMatch(
i -> list.get(i - 1).compareTo(list.get(i)) <= 0)) Collections.shuffle(list);
System.out.println(list); }
}
6.2 Local Dates 355
  6.2
Local Dates
Now let us turn from absolute time to human time. There are two kinds of human time in the Java API, local date/time and zoned time. Local date/time has a date and/or time of day, but no associated time zone information. An example of a local date is June 14, 1903 (the day on which Alonzo Church, inventor of the lambda calculus, was born). Since that date has neither a time of day nor time zone information, it does not correspond to a precise instant of time. In contrast, July 16, 1969, 09:32:00 EDT (the launch of Apollo 11) is a zoned date/time, representing a precise instant on the time line.
There are many calculations where time zones are not required, and in some cases they can even be a hindrance. Suppose you schedule a meeting every week at 10:00. If you add 7 days (that is, 7 × 24 × 60 × 60 seconds) to the last zoned time, and you happen to cross the daylight savings time boundary, the meeting will be an hour too early or too late!
For that reason, the API designers recommend that you do not use zoned time unless you really want to represent absolute time instances. Birthdays, holidays, schedule times, and so on are usually best represented as local dates or times.
A LocalDate is a date with a year, month, and day of the month. To construct one, you can use the now or of static methods:
LocalDate today = LocalDate.now(); // Today's date LocalDate alonzosBirthday = LocalDate.of(1903, 6, 14); alonzosBirthday = LocalDate.of(1903, Month.JUNE, 14);
// Uses the Month enumeration
Unlike the irregular conventions in UNIX and java.util.Date, where months are zero-based and years are counted from 1900, you supply the usual numbers for the month of year. Alternatively, you can use the Month enumeration.
Table 6.2 shows the most useful methods for working with LocalDate objects.

 356 Chapter 6   The Date and Time API
 Table 6.2 LocalDate Methods Method
now, of
plusDays, plusWeeks,
plusMonths, plusYears minusDays, minusWeeks,
minusMonths, minusYears plus, minus
withDayOfMonth, withDayOfYear, withMonth, withYear
getDayOfMonth getDayOfYear getDayOfWeek
getMonth, getMonthValue getYear
until
isBefore, isAfter isLeapYear
Description
These static methods construct a LocalDate, either from the current time or from a given year, month, and day.
Adds a number of days, weeks, months, or years to this LocalDate.
Subtracts a number of days, weeks, months, or years from this LocalDate.
Adds or subtracts a Duration or Period.
Returns a new LocalDate with the day of month, day of year,
month, or year changed to the given value.
Gets the day of the month (between 1 and 31).
Gets the day of the year (between 1 and 366).
Gets the day of the week, returning a value of the DayOfWeek enumeration.
Gets the month as a value of the Month enumeration, or as a number between 1 and 12.
Gets the year, between –999,999,999 and 999,999,999.
Gets the Period, or the number of the given ChronoUnits, between two dates.
Compares this LocalDate with another.
Returns true if the year is a leap year—that is, if it is divisible by 4 but not by 100, or divisible by 400. The algorithm is applied for all past years, even though that is historically inaccurate. (Leap years were invented in the year –46, and the rules involving divisibility by 100 and 400 were introduced in the Gregorian calendar reform of 1582. The reform took over 300 years to become universal.)
                For example, Programmer’s Day is the 256th day of the year. Here is how you can easily compute it:
LocalDate programmersDay = LocalDate.of(2014, 1, 1).plusDays(255); // September 13, but in a leap year it would be September 12
Recall that the difference between two time instants is a Duration. The equivalent for local dates is a Period, which expresses a number of elapsed years, months, or

 6.2 Local Dates 357
 days. You can call birthday.plus(Period.ofYears(1)) to get the birthday next year. Of course, you can also just call birthday.plusYears(1). But birthday.plus(Duration.ofDays(365)) won’t produce the correct result in a leap year.
The until method yields the difference between two local dates. For example, independenceDay.until(christmas)
yields a period of 5 months and 21 days. That is actually not terribly useful because the number of days per month varies. To  nd the number of days, use
independenceDay.until(christmas, ChronoUnit.DAYS) // 174 days
CAUTION: Some methods in Table 6.2 could potentially create nonexistent dates. For example, adding one month to January 31 should not yield February 31. Instead of throwing an exception, these methods return the last valid day of the month. For example,
LocalDate.of(2016, 1, 31).plusMonths(1)
and
LocalDate.of(2016, 3, 31).minusMonths(1)
yield February 29, 2016.
The getDayOfWeek yields the weekday, as a value of the DayOfWeek enumeration. DayOfWeek.MONDAY has the numerical value 1, and DayOfWeek.SUNDAY has the value 7. For example,
LocalDate.of(1900, 1, 1).getDayOfWeek().getValue()
yields 1. The DayOfWeek enumeration has convenience methods plus and minus to compute weekdays modulo 7. For example, DayOfWeek.SATURDAY.plus(3) yields DayOfWeek.TUESDAY.
NOTE: The weekend days actually come at the end of the week. This is different from java.util.Calendar where Sunday has value 1 and Saturday value 7.
In addition to LocalDate, there are also classes MonthDay, YearMonth, and Year to describe partial dates. For example, December 25 (with the year unspeci ed) can be represented as a MonthDay.
The example program in Listing 6.2 shows how to work with the LocalDate class.
      
 358 Chapter 6   The Date and Time API
   Listing 6.2 localdates/LocalDates.java
1 packagelocaldates; 2
3 importjava.time.*;
4 importjava.time.temporal.*;
5
6 publicclassLocalDates
7{
8 public static void main(String[] args) 9{
 10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37 }
6.3
LocalDate today = LocalDate.now(); // Today’s date System.out.println("today: " + today);
LocalDate alonzosBirthday = LocalDate.of(1903, 6, 14); alonzosBirthday = LocalDate.of(1903, Month.JUNE, 14);
// Uses the Month enumeration System.out.println("alonzosBirthday: " + alonzosBirthday);
LocalDate programmersDay = LocalDate.of(2018, 1, 1).plusDays(255); // September 13, but in a leap year it would be September 12 System.out.println("programmersDay: " + programmersDay);
LocalDate independenceDay = LocalDate.of(2018, Month.JULY, 4); LocalDate christmas = LocalDate.of(2018, Month.DECEMBER, 25);
System.out.println("Until christmas: " + independenceDay.until(christmas)); System.out.println("Until christmas: "
+ independenceDay.until(christmas, ChronoUnit.DAYS));
System.out.println(LocalDate.of(2016, 1, 31).plusMonths(1)); System.out.println(LocalDate.of(2016, 3, 31).minusMonths(1));
DayOfWeek startOfLastMillennium = LocalDate.of(1900, 1, 1).getDayOfWeek(); System.out.println("startOfLastMillennium: " + startOfLastMillennium); System.out.println(startOfLastMillennium.getValue()); System.out.println(DayOfWeek.SATURDAY.plus(3));
}
 Date Adjusters
For scheduling applications, you often need to compute dates such as “the  rst Tuesday of every month.” The TemporalAdjusters class provides a number of static methods for common adjustments. You pass the result of an adjustment method to the with method. For example, the  rst Tuesday of a month can be computed like this:

 LocalDate firstTuesday = LocalDate.of(year, month, 1).with( TemporalAdjusters.nextOrSame(DayOfWeek.TUESDAY));
As always, the with method returns a new LocalDate object without modifying the original. Table 6.3 shows the available adjusters.
Table 6.3 Date Adjusters in the TemporalAdjusters Class
6.3 Date Adjusters 359
   Method
next(weekday), previous(weekday) nextOrSame(weekday), previousOrSame(weekday)
dayOfWeekInMonth(n, weekday) lastInMonth(weekday)
firstDayOfMonth(), firstDayOfNextMonth(), firstDayOfNextYear(), lastDayOfMonth(), lastDayOfYear()
Description
Next or previous date that falls on the given weekday
Next or previous date that falls on the given weekday, starting from the given date
The nth weekday in the month
The last weekday in the month
The date described in the method name
      You can also make your own adjuster by implementing the TemporalAdjuster interface. Here is an adjuster for computing the next weekday.
TemporalAdjuster NEXT_WORKDAY = w -> {
LocalDate result = (LocalDate) w; do
{
result = result.plusDays(1); }
while (result.getDayOfWeek().getValue() >= 6);
return result; };
LocalDate backToWork = today.with(NEXT_WORKDAY);
Note that the parameter of the lambda expression has type Temporal, and it must be cast to LocalDate. You can avoid this cast with the ofDateAdjuster method that expects a lambda of type UnaryOperator<LocalDate>.
TemporalAdjuster NEXT_WORKDAY = TemporalAdjusters.ofDateAdjuster(w -> {
LocalDate result = w; // No cast do
{
result = result.plusDays(1);

 360 Chapter 6   The Date and Time API
 }
while (result.getDayOfWeek().getValue() >= 6); return result;
});
6.4 Local Time
A LocalTime represents a time of day, such as 15:30:00. You can create an instance with the now or of methods:
LocalTime rightNow = LocalTime.now();
LocalTime bedtime = LocalTime.of(22, 30); // or LocalTime.of(22, 30, 0)
Table 6.4 shows common operations with local times. The plus and minus operations wrap around a 24-hour day. For example,
LocalTime wakeup = bedtime.plusHours(8); // wakeup is 6:30:00
NOTE: LocalTime doesn’t concern itself with AM/PM. That silliness is left to a
formatter—see Section 6.6, “Formatting and Parsing,” on p. 365.
   Table 6.4 LocalTime Methods Method
now, of
plusHours, plusMinutes, plusSeconds, plusNanos
minusHours, minusMinutes, minusSeconds, minusNanos
plus, minus
withHour, withMinute, withSecond,
withNano
getHour, getMinute, getSecond, getNano
toSecondOfDay, toNanoOfDay isBefore, isAfter
Description
These static methods construct a LocalTime, either from the current time or from the given hours, minutes, and, optionally, seconds and nanoseconds.
Adds a number of hours, minutes, seconds, or nanoseconds to this LocalTime.
Subtracts a number of hours, minutes, seconds, or nanoseconds from this LocalTime.
Adds or subtracts a Duration.
Returns a new LocalTime with the hour, minute, second,
or nanosecond changed to the given value.
Gets the hour, minute, second, or nanosecond of this LocalTime.
Returns the number of seconds or nanoseconds between midnight and this LocalTime.
Compares this LocalTime with another.
           
 6.5 Zoned Time 361
 There is a LocalDateTime class representing a date and time. That class is suitable for storing points in time in a  xed time zone—for example, for a schedule of classes or events. However, if you need to make calculations that span the daylight sav- ings time, or if you need to deal with users in different time zones, you should use the ZonedDateTime class that we discuss next.
6.5 Zoned Time
Time zones, perhaps because they are an entirely human creation, are even messier than the complications caused by the earth’s irregular rotation. In a rational world, we’d all follow the clock in Greenwich, and some of us would eat our lunch at 02:00, others at 22:00. Our stomachs would  gure it out. This is actually done in China, which spans four conventional time zones. Elsewhere, we have time zones with irregular and shifting boundaries and, to make matters worse, the daylight savings time.
As capricious as the time zones may appear to the enlightened, they are a fact of life. When you implement a calendar application, it needs to work for people who  y from one country to another. When you have a conference call at 10:00 in New York, but happen to be in Berlin, you expect to be alerted at the correct local time.
The Internet Assigned Numbers Authority (IANA) keeps a database of all known time zones around the world (www.iana.org/time-zones), which is updated several times per year. The bulk of the updates deals with the changing rules for daylight savings time. Java uses the IANA database.
Each time zone has an ID, such as America/New_York or Europe/Berlin. To  nd out all available time zones, call ZoneId.getAvailableZoneIds. At the time of this writing, there were almost 600 IDs.
Given a time zone ID, the static method ZoneId.of(id) yields a ZoneId object. You can use that object to turn a LocalDateTime object into a ZonedDateTime object by calling local.atZone(zoneId), or you can construct a ZonedDateTime by calling the static method ZonedDateTime.of(year,month,day,hour,minute,second,nano,zoneId). For example,
ZonedDateTimeapollo11launch =ZonedDateTime.of(1969,7,16,9,32,0,0, ZoneId.of("America/New_York"));
// 1969-07-16T09:32-04:00[America/New_York]
This is a speci c instant in time. Call apollo11launch.toInstant to get the Instant. Con- versely, if you have an instant in time, call instant.atZone(ZoneId.of("UTC")) to get the ZonedDateTime at the Greenwich Royal Observatory, or use another ZoneId to get it elsewhere on the planet.

362 Chapter 6   The Date and Time API
